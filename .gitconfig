[user]
	name = <First Last>
	email = <email>
	initials = <fl>
[core]
	editor = code --wait
	safecrlf = warn
	autocrlf = true
[branch "develop"]
	mergeoptions = --no-ff
[branch "master"]
	mergeoptions = --ff-only
[fetch]
	prune = true
[pull]
	rebase = merges
[push]
	default = simple
	followTags = true
[rerere]
	enabled = true
[workflow]
	featureaffix = feature
	hotfixaffix = hotfix
	releaseaffix = release
	dorebase = false
[alias]
	ec = config --global -e
	amend = commit --amend
	br = branch
	caa = commit -a --amend -C HEAD
	ci = commit -m
	# use without parameters for quick commits with a default message of 'SAVEPOINT" (equivalent to wip or save aliases)
	cm = "!bash -c 'git commit -am \"${1-SAVEPOINT}\";' -"
	co = checkout
	cob = checkout -b
	cp = cherry-pick
	cpa = cherry-pick --abort
	cpc = cherry-pick --continue
	# migrate
	# $1 correct / new branch name required
	# $2 target branch name optional defaults to develop
	# $3 commit range optional defaults to the current / wrong branch remote tracking branch
	migrate = "!bash -c 'set -euo pipefail; migrate() { local -r correct_br=${1:-}; local -r wrong_br=$(git symbolic-ref --short HEAD); local -r target_br=${2-develop}; [[ -z $correct_br ]] && { git pprint -ef \"\\x27correct_br\\x27 is required!$\"; exit 1; }; if [[ -z $(git branch --list \"$correct_br\") ]]; then git checkout -b \"$correct_br\" && git branch -f \"$wrong_br\" \"${3-\"${wrong_br}@{u}\"}\" && git rebase --onto \"$target_br\" \"$wrong_br\" && git pprint -if \"Commits migrated to \\x27$correct_br\\x27\"; else git checkout \"$(git rev-parse HEAD)\" && git branch -f \"$wrong_br\" \"${3-\"${wrong_br}@{u}\"}\" && git rebase --onto \"$correct_br\" \"$wrong_br\" && git checkout -B \"$correct_br\" HEAD && git pprint -if \"Commits migrated to \\x27$correct_br\\x27\"; fi; }; migrate \"$@\";' -"
	undo = "!bash -c 'git reset --hard '@{'\"${1-1}\"'}';' -"
	unstage = reset HEAD
	rba = rebase --abort
	rbc = rebase --continue
	rbi = "!bash -c 'git rebase -i \"$(git merge-base \"${1-develop}\" \"${2-HEAD}\")\";' -"
	rbs = rebase --skip
	wipe = "!bash -c 'git add -A && git commit -qm \"WIPE SAVEPOINT\" && git reset --hard HEAD~1;' -"
	# log
	commit-chain = "!bash -c 'git logbase --graph \"${1-develop}\"..\"${2-HEAD}\";' -"
	follow = "!bash -c 'git logbase --graph --follow \"$@\";' -"
	last = "!bash -c 'git log --decorate --stat \"${1--1}\" HEAD;' -"
	logbase = log --pretty='%C(bold blue)%h%C(reset) |%C(auto)%d%C(reset) %C(white)%s%C(reset) %C(bold yellow)(%ar) on (%aD)%C(reset) %C(bold cyan)[%an]%C(reset)'
	lg = "!bash -c 'git logbase --all --graph \"$@\";' -"
	rlg = "!bash -c 'git reflog \"$(git rev-parse --abbrev-ref HEAD)\";' -"
	st = status
	# oneflow alias b*
	# base command - bnew <-f|h|r[m|u]> branch short name
	# creates and checkout new branch
	# optionally migrates and or updates trunk branch (bpoint)
	bnew = "!bash -c 'set -euo pipefail; bnew() { local -r this_br=$(git symbolic-ref --short HEAD); local -r my_intls=$(git config user.initials); local br_afx=''; local br_desc=''; local br_name=''; local br_point=''; local mgt_act=''; local mgt_act_pat=''; local br_flg=''; local mgt_flg=0; local upd_flg=0; cob() { if [[ $this_br != \"$br_point\" ]]; then git checkout \"$br_point\"; fi && { if [[ $upd_flg -eq 1 ]]; then git pprint -if \"Updating branch \\x27$br_point\\x27\"; git pull \"${2-origin}\" \"$br_point\"; fi && git checkout -b \"$br_name\" && git pprint -sf \"bnew succeeded!\"; }; return $?; }; migrate() { git bmigrate \"$br_name\" \"$br_point\" && { if [[ $upd_flg -eq 1 ]]; then git bup; fi && git pprint -sf \"bnew succeeded!\"; }; return $?; }; while getopts ':fhrum' flg; do case $flg in f) if [[ -z $br_flg ]]; then br_flg=$flg; br_point='develop'; br_afx=$(git config workflow.featureaffix); fi;; h) if [[ -z $br_flg ]]; then br_flg=$flg; br_point='master'; br_afx=$(git config workflow.hotfixaffix); fi;; r) if [[ -z $br_flg ]]; then br_flg=$flg; br_point='develop'; br_afx=$(git config workflow.releaseaffix); fi;; m) mgt_flg=1;; u) upd_flg=1;; *) git pprint -ef \"Invalid option expecting \\x27<-f|h|r[m][u]>\\x27!\"; exit 1;; esac done; shift $((OPTIND - 1)); [[ -z $br_flg ]] && { git pprint -ef \"A flag \\x27<-f|h|r>\\x27 indicating the kind of branch to create is required!\"; exit 1; }; br_desc=${1:-}; [[ -z $br_desc ]] && { git pprint -ef \"Option \\x27-$br_flg\\x27 requires an argument like my-new-branch!\"; exit 1; }; br_name=${br_afx}\"/${my_intls}/\"$(git check-ref-format --branch \"$(git trimcompactreplacespace -l \"$br_desc\" \"-\")\"); if [[ -n $(git branch --list \"$br_name\") ]]; then git pprint -ef \"A branch named \\x27$br_name\\x27 already exists!\"; elif [[ $mgt_flg -eq 1 || -n $(git status --porcelain) ]]; then if [[ -n $(git status --porcelain) ]]; then if [[ $this_br = 'develop' || $this_br = 'master' ]]; then git pprint -gf \"We noticed your working directory is dirty! - changes must be committed to the new branch \\x27$br_name\\x27 (n) or you may abort (a).\\n\" | fold -sw 100; mgt_act_pat=\"^[nN]$|^[aA]$\"; else git pprint -gf \"We noticed your working directory is dirty! Would you like to commit your changes to the new branch $(tput setaf 7)\\x27$br_name\\x27$(tput setaf 5) (n), this_br branch $(tput setaf 7)\\x27$this_br\\x27$(tput setaf 5) (c), or you may abort (a).\\n\" | fold -sw 100; mgt_act_pat=\"^[nN]$|^[cC]$|^[aA]$\"; fi; mgt_act=$(git pprint -pd \"Default is commit to the the new branch \\x27$br_name\\x27 (n)?: \") && printf \"\\n\"; [[ $mgt_act =~ $mgt_act_pat ]] && mgt_act=$(git trim \"$mgt_act\" | tr '[:upper:]' '[:lower:]') || mgt_act=\"n\"; [[ $mgt_act = \"a\" ]] && exit 0; if [[ $mgt_act = \"c\" ]]; then git bcm && cob \"$@\"; else migrate \"$@\"; fi; else git pprint -gf \"The number of commits you specify will be moved from \\x27$this_br\\x27 to the new branch \\x27$br_name\\x27.\" | fold -sw 100; migrate \"$@\"; fi; else cob \"$@\"; fi; }; bnew \"$@\";' -"
	# base command - bup <-r> <remote[origin]> <trunk branch[develop]>
	# updates trunk branch
	# updates current branch
	# replay current branch commits onto trunk branch if applicable
	# -r interactive rebase of the current branch if applicable
	bup = "!bash -c 'set -euo pipefail; bup() { local -r this_br=$(git symbolic-ref --short HEAD); local br_sync_status=''; local br_remote=''; local did_br_point_upd=0; local did_br_upd=0; local did_br_rply=0; local did_br_rbi=0; local did_proc_push=0; local direct_flg=0; local push_flg=0; local rbi_flg=0; local xpr_flg=0; sync_with_upstream() { local -r br=$1; local -r sync_status=$(git isinsyncwithupstream); if [[ $sync_status = 'out_of_sync' ]]; then git pprint -if \"Updating branch '$br'\"; git pull; elif [[ $sync_status = 'in_sync' ]]; then git pprint -if \"Branch \\x27$br\\x27 is up-to-date\"; elif [[ $sync_status = 'upstream_removed' ]]; then git pprint -wf \"Unsetting upstream for \\x27$br\\x27!\"; git branch --unset-upstream; elif [[ $sync_status = 'no_upstream' ]]; then git pprint -if \"No upstream set for branch \\x27$br\\x27\"; fi; return $?; }; push_to_other_remotes() { br_remote=$(git config branch.\"$(git symbolic-ref --short HEAD)\".remote); if [[ -n $br_remote ]]; then for remote in $(git remote show | grep -v \"$br_remote\"); do git pprint -if \"Pushing branch \\x27$this_br\\x27 to additional remote \\x27$remote\\x27\"; git push --force-with-lease  \"$remote\" \"$this_br\"; done; fi; return $?; }; while getopts ':dprx' flg; do case $flg in d) direct_flg=1;; p) push_flg=1;; r) rbi_flg=1;; x) xpr_flg=1;; *) git pprint -ef \"Invalid option expecting \\x27[-r|x]\\x27!\"; exit 1;; esac done; shift $((OPTIND - 1)); if ! grep -q \"^${1-origin}$\" <<< \"$(git remote show)\"; then git pprint -ef \"Given remote \\x27${1-origin}\\x27 is not valid!\"; exit 1; fi; local -r br_point=${2-develop}; [[ $this_br = 'master' || $br_point = 'master' ]] && git pprint -ef \"Modification of commits on \\x27master\\x27 is not allowed!\" && exit 1; [[ $push_flg -eq 0 && $direct_flg -eq 1 ]] && direct_flg=0; sync_with_upstream \"$this_br\" && did_br_upd=1 && { if [[ $this_br != 'develop' && $xpr_flg -eq 0 ]]; then git checkout \"$br_point\" && sync_with_upstream \"$br_point\" && did_br_point_upd=1 && git checkout \"$this_br\" && { if grep -q \"^feature\" <<< \"$this_br\" && [[ $(git show-ref --heads -s \"$br_point\") != $(git merge-base \"$br_point\" \"$this_br\") ]]; then git pprint -if \"Replaying \\x27$this_br\\x27 onto \\x27$br_point\\x27\"; git rebase -p \"$br_point\" && did_br_rply=1; fi; } && git brbi ${rbi_flg} \"$br_point\" \"$this_br\" && did_br_rbi=1; elif [[ $rbi_flg -eq 1 && $this_br = 'develop' ]]; then git pprint -wf \"Rebase is not allowed for \\x27develop\\x27!\"; elif [[ $rbi_flg -eq 1 && $xpr_flg -eq 1 ]]; then git pprint -wf \"Interactive rebase request will not be honored in eXpress push mode!\"; fi; } && git pprint -sf \"bup|fresh succeeded!\" && { [[ $this_br = 'develop' && $push_flg -eq 1 && $direct_flg -eq 0 ]] && git pprint -wf \"Directly pushing to \\x27$this_br\\x27 is not allowed!\" && exit 0; br_sync_status=$(git isinsyncwithupstream); [[ $br_sync_status = 'no_upstream' ]] && br_remote='' || br_remote=$(git config --local branch.\"$(git symbolic-ref --short HEAD)\".remote); if [[ $push_flg -eq 1 ]]; then if [[ $br_sync_status = 'no_upstream' ]]; then git pprint -if \"Pushing branch \\x27$this_br\\x27 to upstream remote \\x27${1-origin}\\x27\"; git push -u \"${1-origin}\" \"$this_br\"; elif [[ $br_sync_status = 'out_of_sync' ]]; then git pprint -if \"Pushing branch \\x27$this_br\\x27 to upstream remote \\x27$br_remote\\x27\"; git push --force-with-lease; elif [[ $br_sync_status = 'in_sync' ]]; then git pprint -wf \"Nothing to push - \\x27$this_br\\x27 is in sync with \\x27$br_remote\\x27!\"; fi && push_to_other_remotes && did_proc_push=1; elif [[ $br_sync_status = 'out_of_sync' && ($did_br_rply -eq 1 || $did_br_rbi -eq 1) ]]; then git pprint -wf \"\\x27$this_br\\x27 has been previously pushed - syncing with \\x27$br_remote\\x27!\"; git push --force-with-lease && push_to_other_remotes && did_proc_push=1; fi && [[ did_proc_push -eq 1 ]] && git pprint -sf \"bpush|saved succeeded!\" || :; }; }; bup \"$@\";' -"
	# wrapper command - bfresh -> bup
	bfresh = "!bash -c 'git bup \"$@\";' -"
	# base command - bpush <-r> <remote[origin]> <trunk branch[develop]>
	# executes bup
	# pushes current branch to the remote
	bpush = "!bash -c 'set -euo pipefail; bpush() { while getopts ':drx' flg; do case $flg in d) ;; r) ;; x) ;; *) git pprint -ef \"Invalid option expecting \\x27[-r|x]\\x27!\"; exit 1;; esac done; git bup -p \"$@\"; }; bpush \"$@\";' -"
	# wrapper command - bsaved -> bpush
	bsaved = "!bash -c 'git bpush \"$@\";' -"
	# base command - bclean <remote[origin]> <trunk branch[develop]>
	# delete local branches that have been merged or not diverged from trunk branch, develop, or master
	# prunes remote branch references that have been removed from remote
	bclean = "!bash -c 'bclean() { local -r merged_br=($(git branch --merged \"${2-develop}\" | grep -Ev \"^${2-develop}|develop|master$\")); set -eo pipefail; [[ ${merged_br[*]} ]] && printf \"%s\" \"${merged_br[*]}\" | xargs git branch -d && git pprint -if \"Merged branches have been pruned\"; git remote prune \"${1-origin}\" && git pprint -if \"Stale tracking branches have been pruned\"; }; bclean \"$@\";' -"
    # base command - bdone
	# updates develop branch
	# executes bclean
	bdone = "!bash -c 'set -euo pipefail; bdone() { git pprint -if \"Updating branch \\x27${2-develop}\\x27\" && git checkout \"${2-develop}\" && git pull && git bclean \"${1-origin}\" \"${2-develop}\" && git pprint -sf \"bdone succeeded!\"; }; bdone \"$@\";' -"
	# internal oneflow helpers
	bcm = "!bash -c 'set -euo pipefail; bcm() { local -r this_br=$(git symbolic-ref --short HEAD); local add_param=''; local commit_msg=''; local did_commit=0; local direct_flg=0; while getopts ':d' flg; do case $flg in d) direct_flg=1;; *) exit 1;; esac done; shift $((OPTIND - 1)); [[ $this_br = 'develop' && $direct_flg -eq 0 ]] && git pprint -ef \"Direct commit to \\x27develop\\x27 is not allowed!\" && exit 1; [[ $this_br = 'master' ]] && git pprint -ef \"Direct commit to \\x27master\\x27 is not allowed!\" && exit 1; if [[ $(git status --porcelain) ]]; then git pprint -gf \"Ok - lets get your working directory committed - here is your status and the last 5 commits.\\n\" | fold -sw 100; git status && printf \"\\n\"; git logbase --all --graph -5 && printf \"\\n\"; add_param=$(git pprint -pd \"Add tracked and untracked changes (a) or just tracked changes (t)? Default value is just tracked (t): \"); grep -Eiq \"^a$|^t$\" <<< \"$add_param\" && add_param=$(git trim \"$add_param\" | tr '[:upper:]' '[:lower:]') || add_param=\"t\"; commit_msg=$(git pprint -pd \"Enter a commit message. Default value is \\x27SAVEPOINT\\x27: \"); [[ -z $commit_msg ]] && commit_msg='SAVEPOINT' || commit_msg=$(git trim \"$commit_msg\"); if [[ $add_param = \"a\" ]]; then git add -A && git commit -m \"$commit_msg\" && did_commit=1; else git commit -am \"$commit_msg\" && did_commit=1; fi; [[ $did_commit -eq 1 ]] && git pprint -if \"Changes committed\"; else git pprint -wf \"Nothing to commit - working directory is clean!\"; fi; }; bcm \"$@\";' -"
	bmigrate = "!bash -c 'set -euo pipefail; bmigrate() { local -r correct_br=${1:-}; local -r target_br=${2:-}; local -r wrong_br=${3-$(git symbolic-ref --short HEAD)}; local did_commit=0; local max_commits=0; local num_commits=0; local mv_prompt=''; [[ -z $correct_br ]] && git pprint -ef \"\\x27correct_br\\x27 is required!\" && exit 1; [[ -z $target_br ]] && git pprint -ef \"\\x27target_br\\x27 is required!\" && exit 1; [[ -z $(git branch --list \"$target_br\") ]] && git pprint -ef \"The branch \\x27$target_br\\x27 must exist!\" && exit 1; [[ -z $(git branch --list \"$wrong_br\") ]] && git pprint -ef \"The branch \\x27$wrong_br\\x27 must exist!\" && exit 1; [[ $correct_br = \"$wrong_br\" ]] && git pprint -ef \"Check the command parameters - \\x27correct_br\\x27 and \\x27wrong_br\\x27 can not be equal!\" && exit 1; [[ $correct_br = 'master' || $wrong_br = 'master' ]] && git pprint -ef \"Modification of commits on \\x27master\\x27 is not allowed!\" && exit 1; [[ $correct_br = 'develop' ]] && git pprint -wf \"You are attempting to move commits to \\x27develop\\x27 - You may not be able to push \\x27develop\\x27 directly to the remote!\\n\" '\\n' && ABORT=$(git pprint -pd \"Press ENTER to continue or (a) to abort: \") && grep -iq \"^a$\" <<< \"$ABORT\" && exit 1; [[ $wrong_br != $(git symbolic-ref --short HEAD) ]] && git pprint -wf \"Migration requires \\x27$wrong_br\\x27 to be the current branch - attempting to checkout '$wrong_br'!\" '\\n'  && [[ -z $(git checkout \"$wrong_br\" 2>/dev/null) ]] && git pprint -ef \"Checkout of '$wrong_br' failed!\" && exit 1; if [[ -n $(git status --porcelain) ]]; then git bcm -d && did_commit=1; mv_prompt=\"Commit \\x27$(git rev-parse --short HEAD)\\x27 will be moved from \\x27$wrong_br\\x27 to \\x27$correct_br\\x27 - would you like to move additional commits? Max value is max_commits. Default value is 0: \"; else mv_prompt=\"How many commits from \\x27$wrong_br\\x27 to \\x27$correct_br\\x27 would you like to move? Max value is max_commits. Default value is 0: \"; fi; if [[ -n $(git rev-parse --verify --quiet '@{u}' 2>/dev/null) && $(git rev-list --count @'{u}'..) -gt 0 ]]; then max_commits=$(git rev-list --count @'{u}'..); printf \"\\n\"; git logbase @'{u}'..; printf \"\\n\"; elif [[ $(git rev-list --count \"$target_br\"..HEAD) -gt 0 ]]; then max_commits=$(git rev-list --count \"$target_br\"..HEAD); printf \"\\n\"; git logbase --graph \"$target_br\"..'HEAD'; printf \"\\n\"; else git pprint -ef \"No commits on '$wrong_br' can be safely moved!\"; exit 1; fi; [[ $did_commit -eq 1 ]] && max_commits=$((max_commits - 1)); [[ $max_commits -gt 0 ]] && mv_prompt=$(sed \"s/max_commits/$max_commits/g\" <<< \"$mv_prompt\") && num_commits=$(git pprint -pd \"$mv_prompt\"); [[ ${num_commits} =~ ^[0-9]{1,}$ ]] && { [[ $num_commits -gt $max_commits ]] && num_commits=$max_commits || :; } || num_commits=0; [[ $did_commit -eq 1 ]] && num_commits=$((num_commits + 1)); git migrate \"$correct_br\" \"$target_br\" \"HEAD~$num_commits\"; }; bmigrate \"$@\";' -"
	brbi = "!bash -c 'set -euo pipefail; brbi() { if [[ $1 -eq 1 ]] || grep -iq \"^true$\" <<< \"$(git config workflow.dorebase)\"; then git pprint -if \"Checking if there are commits for interactive rebase\"; if [[ $(git rev-list --count develop..develop) -gt 0 ]]; then git pprint -if \"Starting interactive rebase for \\x27$3\\x27\"; git rebase -i \"$(git merge-base \"$2\" \"$3\")\"; else git pprint -wf \"No commits between \\x27$2..$3\\x27 for interactive rebase!\"; fi; fi; }; brbi \"$@\";' -"
	# remote repo
	pushf = push --force-with-lease
	pusht = push --follow-tags
	up = "!bash -c 'git pull \"$@\";' -"
	# helpers
	isinsyncwithupstream = "!bash -c 'set -euo pipefail; isinsyncwithupstream() { local -r this_br=${1-$(git symbolic-ref --short HEAD)}; local -r remote=$(git config --local branch.\"$this_br\".remote); local -r merge_ref=$(git config --local branch.\"$this_br\".merge); [[ -n $remote &&  -n $merge_ref ]] && local -r upstream_commit=$(git ls-remote \"$remote\" \"$merge_ref\") || local -r upstream_commit=''; if [[ -z $upstream_commit ]]; then if grep -iq \"no upstream\" <<< \"$(git rev-parse --verify \"${this_br}@{u}\" 2>&1)\"; then printf \"%s\" 'no_upstream'; else printf \"%s\" 'upstream_removed'; fi; else [[ $(git rev-parse \"$this_br\") = $(git ls-remote $(git rev-parse --abbrev-ref \"${this_br}@{u}\" | sed \"s%/% %g\") | cut -f1) ]] && printf \"%s\" 'in_sync' || printf \"%s\" 'out_of_sync'; fi; }; isinsyncwithupstream \"$@\";' -"
	pprint = "!bash -c 'set -euo pipefail; pprint() { local -r red=$(tput setaf 1); local -r grn=$(tput setaf 2); local -r org=$(tput setaf 3); [[ $(git whichos) != 'WIN' ]] && local -r blu=$(tput setaf 4); [[ $(git whichos) = 'WIN' ]] && local -r blu=$(tput setaf 6); local -r pur=$(tput setaf 5); local -r wht=$(tput setaf 7); local -r rst=$(tput sgr0); local style_flg=''; local cmd_flg=''; while getopts ':egipswdf' flg; do case $flg in e) style_flg='e';; g) style_flg='g';; i) style_flg='i';; p) style_flg='p';; s) style_flg='s';; w) style_flg='w';; d) cmd_flg='d';; f) cmd_flg='f';; *) printf  \"%b\\n\" \"${red}Invalid option expecting \\x27<-e|g|i|p|s[d|f]>\\x27!${rst}\"; exit 1;; esac done; shift $((OPTIND - 1)); local string=${1:-}; local -r prefix=${2:-}; local -r postfix=${3:-}; [[ -z $style_flg ]] && { printf \"%b\\n\" \"${red}A flag \\x27<-e|g|i|p|s>\\x27 indicating the output style is required!${rst}\"; exit 1; }; [[ -z $cmd_flg ]] && { printf \"%b\\n\" \"${red}A flag \\x27<-d|f>\\x27 indicating the command to use is required!${rst}\"; exit 1; }; [[ -z $string ]] && { printf \"%b\\n\" \"${red}A string to output is required!${rst}\"; exit 1; }; case $style_flg in e) string=\"${red}==> $string${rst}\";; g) string=\"${pur}==> $string${rst}\";; i) string=\"${blu}==> $string${rst}\";; p) string=\"${wht}==> $string${rst}\";; s) string=\"${grn}==> $string${rst}\";; w) string=\"${org}==> $string${rst}\";; esac; case $cmd_flg in d) read -p \"$(printf \"%b\\n\" \"${prefix}${string}${postfix}\")\" -r input; printf \"%s\" \"$input\";; f) printf \"%b\\n\" \"${prefix}${string}${postfix}\";; esac; }; pprint \"$@\";' -"
	trim = "!bash -c 'set -euo pipefail; trim() { local -r string=${1:-}; [[ -z $string ]] && { git pprint -ef \"A string to operate on is required!\"; exit 1; }; sed \"s/^[[:blank:]]*//;s/[[:blank:]]*$//\" <<< \"$string\"; }; trim \"$@\";' -"
	trimcompactreplacespace = "!bash -c 'set -euo pipefail; trimcompactreplacespace() { local lwr_flg=0; local upr_flg=0; while getopts ':lu' flg; do case $flg in l) lwr_flg=1;; u) upr_flg=1;; *) git pprint -ef \"Invalid option expecting \\x27[-l|u]\\x27!\"; exit 1;; esac done; shift $((OPTIND - 1)); local -r string=${1:-}; local pat=${2:-}; [[ -z $string ]] && { git pprint -ef \"A string to operate on is required!\"; exit 1; }; [[ -z $pat ]] && { git pprint -ef \"A relacement string is required!\"; exit 1; }; pat=\"s/ /$pat/g\"; git trim \"$string\" | tr -s \" \" | if [[ lwr_flg -eq 1 ]]; then tr '[:upper:]' '[:lower:]' | sed -e \"$pat\"; elif [[ upr_flg -eq 1 ]]; then tr '[:lower:]' '[:upper:]' | sed -e \"$pat\"; else sed -e \"$pat\"; fi; }; trimcompactreplacespace \"$@\";' -"
	whichos = "!bash -c 'set -euo pipefail; whichos() { local -r OS=$(uname -s); local os=''; if [[ ${OS:0:6} = 'Darwin' ]]; then os='OSX'; elif [[ ${OS:0:5} = 'Linux' ]]; then os='LINUX'; elif [[ ${OS:0:10} = 'MINGW32_NT' ]]; then os='WIN'; elif [[ ${OS:0:10} = 'MINGW64_NT' ]]; then os='WIN'; fi; printf \"%s\\n\" \"$os\"; }; whichos;' -"
	# experimental / testing
	colors = "!bash -c 'set -euo pipefail; for i in {0..7}; do printf \"%s\\n\" \"$(tput setaf \"$i\")Color $i$(tput sgr 0)\"; done;' -"
	commandwithparams = "!bash -c 'set -euo pipefail; printf \"%s/n\" \"${1-1} ${2-2}\";' -"
	parampass = "!bash -c 'set -euo pipefail; git commandwithparams \"$@\";' -"
	temptyparam = "!bash -c 'set -euo pipefail; if [[ ! -z ${1:-} ]]; then printf \"%s\\n\" \"$1\"; printf \"%s\\n\" \"${1// }\"; else printf \"%s\\n\" \"Empty param\"; fi;' -"
	tgetopts = "!bash -c 'set -euo pipefail; while getopts ':abc' flg; do case $flg in *) printf \"%s\\n\" \"$flg $OPTIND ${OPTARG:-}\";; esac done;' -"
[diff]
	tool = semanticmerge
	#tool = vscode
[difftool]
	prompt = false
[difftool "semanticmerge"]
	cmd = \"C:\\Users\\<UserName>\\AppData\\Local\\semanticmerge\\semanticmergetool.exe\" -s \"$LOCAL\" -d \"$REMOTE\" --nolangwarn
[difftool "vscode"]
	cmd = code --wait --diff $LOCAL $REMOTE
[merge]
	tool = semanticmerge
[mergetool]
  	prompt = false
  	keepBackup = false
[mergetool "semanticmerge"]
	cmd = \"C:\\Users\\<UserName>\\AppData\\Local\\semanticmerge\\semanticmergetool.exe\" -s \"$REMOTE\" -d \"$LOCAL\" -b \"$BASE\" -r \"$MERGED\" -a --nolangwarn
	trustExitCode = true
